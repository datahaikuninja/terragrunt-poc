name: Test Terraform configuration files

on:
  pull_request:
    branches:
      - main
        #- staging
        #- production
    types:
      - opened
      - synchronize

env:
  TF_VER: "1.6.6"
  TG_VER: "0.55.0"
  TF_LINT_VER: "v0.50.2"

jobs:
  check-child-modules-have-changed:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash -euo pipefail {0}
    outputs:
      #child_module_changed: ${{ steps.set-job-output.outputs.child_module_changed }}
      child_module_changed: ${{ steps.changed-files.outputs.any_modified }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run changed-files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            modules/**
      #- name: Set job output
      #  if: steps.changed-files.outputs.any_modified == 'true'
      #  id: set-job-output
      #  run: |
      #    echo "child_module_changed=true" >> "$GITHUB_OUTPUT"

  check-root-modules-have-changed:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash -euo pipefail {0}
    outputs:
      #root_module_changed: ${{ steps.set-job-output.outputs.root_module_changed }}
      root_module_changed: ${{ steps.changed-files.outputs.any_modified }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run changed-files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            env/**
      #- name: Set job output
      #  if: steps.changed-files.outputs.any_modified == 'true'
      #  id: set-job-output
      #  run: |
      #    echo "root_module_changed=true" >> "$GITHUB_OUTPUT"

  terraform-fmt:
    needs: check-child-modules-have-changed
    if: needs.check-child-modules-have-changed.outputs.child_module_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./modules
        shell: bash -euo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # TODO: cache terraform plugin
      # name: cache tfsec
      # uses: actions/cache@v4
      # path: |
      # key: |
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VER }}
      - name: Run terraform fmt
        run: |
          terraform fmt -check -diff -recursive

  tflint:
    needs: check-child-modules-have-changed
    if: needs.check-child-modules-have-changed.outputs.child_module_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./modules
        shell: bash -euo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # TODO: cache tflint plugin
      # - name: Cache plugin dir
      #   uses: actions/cache@v4
      #   path: |
      #     - ~/.tflint.d
      #   key: |
      #     - 
      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TF_LINT_VER }}
      - name: Init tflint
        run: |
          tflint --init
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Run tflint
        run: |
          tflint --format default --recursive # TODO: change to --format checkstyle to pipe reviewdog

  trivy:
    needs: check-child-modules-have-changed
    if: needs.check-child-modules-have-changed.outputs.child_module_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./modules
        shell: bash -euo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "./modules"
          hide-progress: false
          format: "table"
          exit-code: "1"
          ignore-unfixed: false
          severity: "CRITICAL,HIGH"

  terragrunt-hclfmt:
    needs: check-root-modules-have-changed
    if: needs.check-root-modules-have-changed.outputs.root_module_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./env
        shell: bash -euo pipefail {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run terragrunt hclfmt
        uses: gruntwork-io/terragrunt-action@v2
        with: 
          tf_version: ${{ env.TF_VER }}
          tg_version: ${{ env.TG_VER }}
          tg_dir: ./env
          tg_command: "hclfmt --terragrunt-check --terragrunt-diff"

            #  terragrunt-run-all-plan:
            #    needs: [check-child-modules-have-changed, check-root-modules-have-changed]
            #    if: needs.check-child-modules-have-changed.outputs.child_module_changed == 'true' || needs.check-root-modules-have-changed.outputs.root_module_changed == 'true'
            #    runs-on: ubuntu-latest
            #    permissions:
            #      contents: read
            #      id-token: write
            #      pull-request: write
            #    defaults:
            #      run:
            #        shell: bash -euo pipefail {0}
            #    steps:
            #      - name: Checkout
            #        uses: actions/checkout@v4
            #      - name: Set environment variables for devi
            #        if: github.base_ref == 'main'
            #        run: |
            #          echo "TG_DIR=./env/dev" >> $GITHUB_ENV
            #          echo "PROJECT_ID=" >> $GITHUB_ENV
            #          echo "WORKLOAD_IDENTITY_PROVIDER=" >> $GITHUB_ENV
            #      - name: Set environment variables for stag
            #        if: github.base_ref == 'staging'
            #        run: |
            #          echo "TG_DIR=./env/stg" >> $GITHUB_ENV
            #          echo "PROJECT_ID=" >> $GITHUB_ENV
            #          echo "WORKLOAD_IDENTITY_PROVIDER=" >> $GITHUB_ENV
            #      - name: Set environment variables for prod
            #        if: github.base_ref == 'production'
            #        run: |
            #          echo "TG_DIR=./env/prd" >> $GITHUB_ENV
            #          echo "PROJECT_ID=" >> $GITHUB_ENV
            #          echo "WORKLOAD_IDENTITY_PROVIDER=" >> $GITHUB_ENV
            #      - name: Authenticate to Google Cloud
            #        uses: google-github-actions/auth@v2
            #        with:
            #          project_id: ${{ env.PROJECT_ID }}
            #          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
            #      - name: Run terragrunt run-all plan
            #        uses: gruntwork-io/terragrunt-action@v2
            #        with: 
            #          tf_version: ${{ env.TF_VER }}
            #          tg_version: ${{ env.TG_VER }}
            #          tg_dir: ${{ env.TG_DIR }}
            #          tg_command: "run-all plan"
